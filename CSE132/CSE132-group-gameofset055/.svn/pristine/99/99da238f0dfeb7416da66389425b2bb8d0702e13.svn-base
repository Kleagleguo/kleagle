package lab5.view;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;

import lab5.model.Card;
import lab5.model.Player;

public class SetMsgOutputStream {
	
	private DataOutputStream dos;
	
	public SetMsgOutputStream(DataOutputStream dos) {
		this.dos = dos; 
	}
	
	public void helloMessage(byte messageType, short length, String name) {
		try {
			dos.writeByte('!');
			dos.writeByte(messageType);
			dos.writeShort(length);
			dos.writeUTF(name);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void helloResponseMessage(byte messageType, short length, byte gameVersion, byte playerNum) {
		try {
			dos.writeByte('!');
			dos.writeByte(messageType);
			dos.writeShort(length);
			dos.writeByte(gameVersion);
			dos.writeByte(playerNum);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void gamePlayerUpdateMessage(int numPlayers, Set<Player> players) {
		try {
			dos.writeByte('!');
			dos.writeByte(6);
			dos.writeShort(numPlayers);
			for (Player p : players) {
				dos.writeByte(p.getID());
				dos.writeUTF(p.getName());
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void gameFieldUpdateMessage(byte cardsLeft, byte fieldSize, Map<Integer, Card> currentCards) {
		try {
			dos.writeByte('!');
			dos.writeByte(5);
			dos.writeShort(50);
			dos.writeByte(cardsLeft);
			dos.writeByte(fieldSize);
			for (int i = 0; i < fieldSize; i++) {
				dos.writeByte(currentCards.get(i).getNumber());
				dos.writeByte(currentCards.get(i).getColor());
				dos.writeByte(currentCards.get(i).getShading());
				dos.writeByte(currentCards.get(i).getShape());
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void playerCallSetMessage(byte num) {
		try {
			dos.writeByte('!');
			dos.writeByte(13);
			dos.writeShort(1);
			dos.writeByte(num);
		} catch (IOException e) {
			e.printStackTrace();
		}
	
	}
	
	public void selectCardsMessage(byte num) {
		try {
			dos.writeByte('!');
			dos.writeByte(14);
			dos.writeShort(1);
			dos.writeByte(num);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void setCall(byte num, ArrayList<Byte> selectedCardsNum) {
		try {
			//System.out.println("setCall:");
			dos.writeByte('!');
			dos.writeByte(15);
			dos.writeShort(4);
			dos.write(num);
			//System.out.println(selectedCardsNum.size());
			for (int i = 0; i < selectedCardsNum.size(); i++) {
				//System.out.println(selectedCardsNum.get(i));
				dos.writeByte((byte) selectedCardsNum.get(i));
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void validSet(byte num) {
		try {
			dos.writeByte('!');
			dos.writeByte(17);
			dos.writeShort(1);
			dos.writeByte(num);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void invalidSet(byte num) {
		try {
			dos.writeByte('!');
			dos.writeByte(18);
			dos.writeShort(2);
			dos.writeByte(num);
			dos.writeByte(2);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void gameScoreUpdate(Set<Player> players) {
		try {
			dos.writeByte('!');
			dos.writeByte(7);
			dos.writeShort((short) players.size() + 1);
			dos.writeByte((byte) players.size());
			for (Player p : players) {
				dos.writeByte((byte) p.getID());
				dos.writeShort((short) p.getScore());
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void gameOverMessage(byte num) {
		try {
			dos.writeByte('!');
			dos.writeByte(60);
			dos.writeShort(1);
			dos.writeByte(num);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void hintMessage(byte num) {
		try {
			dos.writeByte('!');
			dos.writeByte(100);
			dos.writeShort(1);
			dos.writeByte(num);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	public void writeByte(byte bt, short length) {
		try {
			startMsg(dos, bt, length);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void writeUTF(String str) {
		try {
			dos.writeUTF(str);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void startMsg(DataOutputStream dos, int type, int length) throws IOException {
		dos.writeByte((int)'!');	//msg delimiter
		dos.writeByte(type);		//msg type
		dos.writeShort(length);	//payload length (in bytes)
	}
}
