package lab5.view;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.net.Socket;

import lab5.GameController;
import lab5.model.Card;
import lab5.model.Player;

public class PlayerHandler implements Runnable {

	private GameController game;
	private Socket s = null;
	private String playerName;
	private byte playerId;
	private SetMsgInputStream sis;
	private SetMsgOutputStream sos;
	
	public PlayerHandler(GameController game, Socket s) throws IOException {
		this.game = game;
		this.s = s;
		DataInputStream dis = new DataInputStream(s.getInputStream());
		DataOutputStream dos = new DataOutputStream(s.getOutputStream());
		sis = new SetMsgInputStream(dis);
		sos = new SetMsgOutputStream(dos);
	}

	public void run() {
		while (true) {
			// read commands and return random response
			char c = (char)sis.readByte();
			while (c != '!') {
				c = (char)sis.readByte();
			}
			int type = sis.readByte();
			int length = sis.readShort();
			switch (type) {
			case 0: {						    // hello message from a new player
				String playerName = sis.readUTF();
				this.playerName = playerName;
				game.addPlayer(this, playerName);
				game.sleep(50);
				playerId = (byte) game.getGame().getPlayers().size();
				sos.helloResponseMessage((byte)1, (short)2, (byte)1, playerId);
				if (game.getGame().getPlayers().size() == 2) {
					game.startSetGame();
				}
				break;
			}

			case 13: {			 	     		// player calls set
				if (game.getPlayeCallingSet() == -1) {
					byte id = sis.readByte();
					//System.out.println("ph case 13 id = : " + id);
					game.handlePlayerCallingSet(id);
				}
				break;
			}

			case 15: {						    // set call
				System.out.println("type 15");
				byte num = sis.readByte();
				int[] cardsNum = new int[3];
				cardsNum[0] = sis.readByte();
				cardsNum[1] = sis.readByte();
				cardsNum[2] = sis.readByte();
//				System.out.println("num = " + num);
//				System.out.println("c1 = " + cardsNum[0]);
//				System.out.println("c2 = " + cardsNum[1]);
//				System.out.println("c3 = " + cardsNum[2]);
				game.identifySet(num, cardsNum);
				break;
			}

			case 100: {
//					System.out.println("type = 100");
//					startMsg(dos, 5, 81);
//					for (int i = 0; i < 12; i++) {
//						Card card = game.getGame().dealCard();
//						//System.out.println(card);
//						dos.writeByte(card.getNumber());
//						dos.writeByte(card.getColor());
//						dos.writeByte(card.getShading());
//						dos.writeByte(card.getShape());
//					}
				break;
			}
			
//			case 111: {
//				byte hintNum = sis.readByte();
//				game.giveHint(hintNum);
//				break;
//			}
			default: {  					    // anything else
//					startMsg(dos, 18, 2);			//send type 18 msg
//					dos.writeByte(1);				//player ID
//					dos.writeByte(2);				//reason == NOTASET
			}
			}
		}
	}

	public SetMsgInputStream getSis() {
		return sis;
	}
	
	public SetMsgOutputStream getSos() {
		return sos;
	}
	
	public byte getPlayerId() {
		return playerId;
	}
	
	public String toString() {
		return "name: " + playerName;
	}
}
