package lab5;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import lab5.model.BlockingQueue;
import lab5.model.Card;
import lab5.model.Player;
import lab5.model.SetGame;
import lab5.view.PlayerHandler;

public class GameController extends Thread {
	
	private BlockingQueue<Runnable> runqueue;
	private SetGame game;
	private Set<PlayerHandler> playerHandlers;
	private Map<Integer, Card> currentCards;
	private byte playerCallingSet;
	private ArrayList<Integer> setCardsNums;
	private static final int numCardsOnTable = 12;
	public static final int DELAY = 1000; // nominal sleep delay (in ms)
	
	/**
	 * Constructor of GameController
	 */
	public GameController() {
		runqueue = new BlockingQueue<Runnable>(10);
		game = new SetGame();
		playerHandlers = new HashSet<PlayerHandler>();
		currentCards = new HashMap<Integer, Card>();
		playerCallingSet = -1;
		setCardsNums = new ArrayList<Integer>();
	}
	
	public void run() {
		new Thread(new Server(this)).start();
		while (true) {
			Runnable r = runqueue.dequeue();
			r.run();
		}
	}
	
	public ArrayList<Integer> getSetCardsNums() {
		return setCardsNums;
	}
	
	public byte getPlayeCallingSet() {
		return playerCallingSet;
	}
	
	public void setPlayerCallingSet(byte id) {
		playerCallingSet = id;
	}
	
	public SetGame getGame() {
		return game;
	}
	
	public void addRunnable(Runnable r) {
		runqueue.enqueue(r);
	}
	
	public void message(final String s) {
		addRunnable(
				new Runnable() {
					public void run() {
						System.out.println("message: " + s);
					}
				}
		);
	}
	
	public void addPlayer(final PlayerHandler playerHandler, final String player) {
		addRunnable(new Runnable() {
			@Override
			public void run() {
				playerHandlers.add(playerHandler);
				game.addPlayer(player);
				message("Player joined: " + playerHandler);
				//System.out.println("size = " + playerHandlers.size());
				for (PlayerHandler p : playerHandlers) {
					p.getSos().gamePlayerUpdateMessage(game.getPlayers().size(), game.getPlayers());
				}
			}
		});
	}
	
	public void startSetGame() {
		addRunnable(new Runnable() {
			@Override
			public void run() {
				for (int i = 0; i < numCardsOnTable; i++) {
					Card card = getGame().dealCard();
					currentCards.put(i, card);
				}
				for (PlayerHandler p : playerHandlers) {
					p.getSos().gameFieldUpdateMessage((byte)game.getCards().size(), (byte)numCardsOnTable, currentCards);
				}
			}
		});
	}
	
	public void handlePlayerCallingSet(final byte num) {
		addRunnable(new Runnable() {
			@Override
			public void run() {
				setPlayerCallingSet(num);
				//System.out.println("num*  = " + num);
				//System.out.println("playerhandlers size = " + playerHandlers.size());
				for (PlayerHandler p : playerHandlers) {
					//System.out.println("id = " + p.getPlayerId() + " compares with " + num);
					if (p.getPlayerId() == num) {
						p.getSos().selectCardsMessage(num);
						break;
					}
				}
			}
		});
	}
	
	public void identifySet(final byte num, final int[] cardsNum) {
		addRunnable(new Runnable() {
			@Override
			public void run() {
				System.out.println("identifying........");
//				System.out.println("currentCards size = " + currentCards.size());
//				System.out.println("carsNum[0] = " + cardsNum[0]);
//				System.out.println("cardsNum[1] = " + cardsNum[1]);
//				System.out.println("cardsNum[2] = " + cardsNum[2]);
//				System.out.println(currentCards.get((int) cardsNum[0]));
//				System.out.println("---------------");
				
//				for (int key : currentCards.keySet()) {
//					System.out.println("key = " + key);
//					System.out.println(currentCards.get(key));
//				}
				setCardsNums.add(cardsNum[0]);
				setCardsNums.add(cardsNum[1]);
				setCardsNums.add(cardsNum[2]);
				Card card1 = currentCards.get(cardsNum[0]);
				System.out.println(card1);
				Card card2 = currentCards.get(cardsNum[1]);
				System.out.println(card2);
				Card card3 = currentCards.get(cardsNum[2]);
				System.out.println(card3);
				if ( ( card1.getNumber() == card2.getNumber() 
					&& card1.getNumber() == card3.getNumber() 
					&& card2.getNumber() == card3.getNumber() )
					|| 
					 ( card1.getNumber() != card2.getNumber()
					&& card1.getNumber() != card3.getNumber()
					&& card2.getNumber() != card3.getNumber() ) )
					if ( ( card1.getShading() == card2.getShading() 
						&& card1.getShading() == card3.getShading()
						&& card2.getShading() == card3.getShading() )
						||
						 ( card1.getShading() != card2.getShading()
						&& card1.getShading() != card3.getShading()
						&& card2.getShading() != card3.getShading() ) ) 
						if ( ( card1.getColor() == card2.getColor()
							&& card1.getColor() == card3.getColor()
							&& card2.getColor() == card3.getColor() )
							|| 
							 ( card1.getColor() != card2.getColor()
							&& card1.getColor() != card3.getColor()
							&& card2.getColor() != card3.getColor() ) )
							if ( ( card1.getShape() == card2.getShape()
								&& card1.getShape() == card3.getShape()
								&& card2.getShape() == card3.getShape() ) 
								|| 
								 ( card1.getShape() != card2.getShape()
								&& card1.getShape() != card3.getShape()
								&& card2.getShape() != card3.getShape() ) ) {
								System.out.println(setCardsNums.size());
								for (int i = 0; i < 3; i++) {
									Card card = getGame().dealCard();
									currentCards.put(setCardsNums.get(i), card);
								}
								System.out.println("card left = " + game.getCards().size());
								for (Player p : game.getPlayers()) {
									if (p.getID() == num) {
										p.setScore(p.getScore() + 10);
										break;
									}
								}
								for (PlayerHandler p : playerHandlers) {
									p.getSos().validSet(num);
									p.getSos().gameFieldUpdateMessage((byte)game.getCards().size(), (byte)numCardsOnTable, currentCards);
									p.getSos().gameScoreUpdate(game.getPlayers());
								}
								setPlayerCallingSet((byte) -1);
								setCardsNums.clear();
								return;
							}
				for (PlayerHandler p : playerHandlers) {
					p.getSos().invalidSet(num);
				}	
				setPlayerCallingSet((byte) -1);
				setCardsNums.clear();
				System.out.println("card left = " + game.getCards().size());
			}
		});
	}
	
	/**
	 * The sleep that is observed nominally.
	 * Change DELAY to speed things up or slow things down.
	 */
	public static void sleep() {
		sleep(DELAY);
	}
	
	/**
	 * Delay for an arbitrary amount of time.
	 * @param ms delay amount (in ms)
	 */
	public static void sleep(int ms) {
		try {
			Thread.sleep(ms);
		}
		catch (Exception e) {
			throw new Error("ServerMain.sleep: should not happen " + e);
		}
	}
	
	public static void main(String[] args) {
		GameController game = new GameController();
		game.start();
	}
}
